"""
warning: autogenerated by writefile2. do not edit!
"""

from types import SimpleNamespace as ns
import numpy as np

def train_weak_learner( dataframes, length_l = 1, lag = 0, length_r = 1, linear_operator = None ):

    if linear_operator is None:

        linear_operator = np.ones(( 1, length_r )) / length_r
    
    # number of outcomes
    n_outcomes = 3
    
    #number of time series
    d = dataframes[ 0 ].shape[ 1 ]

    def get_n_samples( df ):

        return df.shape[ 0 ] - length_r + 1 - lag - length_r
    
    for i, df in enumerate( dataframes ):

        assert get_n_samples( df ) >= 1, f"dataframe { df } at index { i } is too short"    

    def get_patch( df, i, length_l, lag, length_r ):

        # number of outcomes
        n_outcomes = 3 
        
        left = df.iloc[ i : i + length_l, : ]
        right = df.iloc[ i + length_l + lag : i + length_l + lag + length_r, :n_outcomes ] # assume outcomes are the first 3 columns
        
        assert ( length_l, d ) == left.shape, f"got { left.shape } but expected { length_l, d }"
        assert ( length_r, n_outcomes ) == right.shape, f"got { right.shape } but expected { length_r, n_outcomes }"
        return left, right

    n_samples_total = sum([ get_n_samples( df ) for df in dataframes ])
    
    L = np.zeros(( n_samples_total, length_l, d ))
    R = np.zeros(( n_samples_total, length_r, n_outcomes ))

    start_index = 0
    for df in dataframes:

        n_samples = get_n_samples( df )
        
        for t in range( n_samples ):
    
            L[ start_index + t ], R[ start_index + t ] = get_patch( df, t, length_l, lag, length_r )
        
        start_index += n_samples

    X = L.reshape( L.shape[ 0 ], -1, order = "C" )
    Z = R.reshape( R.shape[ 0 ], -1, order = "C" )

    assert linear_operator.shape[ 1 ] == length_r, f"linear_operator of shape { linear_operator.shape } cannot be applied to a window of shape { length_r, n_outcomes }"
    
    M = np.kron( linear_operator, np.identity( n_outcomes ))
    Y = Z @ M.T

    def get_weak_learner( X, Y ):

        from sklearn.linear_model import LinearRegression as lm
        return lm( ).fit( X, Y )

    model = get_weak_learner( X, Y )

    def predict( window ):

        assert window.shape == ( length_l, d )
        x = window.reshape( 1, -1, order = "C" )
        assert x.shape == ( 1, length_l * d )
        y = model.predict( x ).squeeze( 0 )
        assert y.shape == ( linear_operator.shape[ 0 ] * n_outcomes, )
        y = y.reshape( linear_operator.shape[ 0 ], n_outcomes )
        return y

    # avoid excessive memory usage
    del dataframes, L, R, X, Z, M, Y

    return ns( 
    
        predict = predict, 
        length_l = length_l, 
        lag = lag,
        length_r = length_r,
        linear_operator = linear_operator
    )
