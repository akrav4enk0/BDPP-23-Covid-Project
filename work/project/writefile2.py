# usage: '%run -i writefile2.py' in your notebook before you use the '%%writefile2' cell magic
# this is called 'writefile2' because it is similar to the built-in 'writefile' cell magic

from IPython.core.magic import register_cell_magic, needs_local_scope
import argparse
import shlex
import re

@needs_local_scope
@register_cell_magic
def writefile2( line, cell, local_ns ):
    
    
    default_name = "cell.py"
    parser = argparse.ArgumentParser( prog = "writefile2" )
    parser.add_argument( "--name", "-n", default = default_name )
    parser.add_argument( "--source", "-s", default = None )
    parser.add_argument( "--verbose", "-v", default = False )
    args = parser.parse_args( shlex.split( line ))
    
    source_annotation = "" if args.source is None else f"\nsource: { args.source }"
    cell = f'''"""\nwarning: autogenerated by writefile2. do not edit!{ source_annotation }\n"""\n\n''' + cell
    
    if args.name == default_name:
        
        regex = r"def\s+([A-Za-z_]\w*)\s*\("
        match = re.search( regex, cell )

        if match:
            args.name = match.group( 1 ) + ".py"
    
    if args.verbose:
        
        print( f"[writefile2] saving file '{ args.name }'" )
        
    with open( args.name, "w" ) as file:
        
        file.write( cell )
        
    exec( cell, None, local_ns )
        
del register_cell_magic, needs_local_scope