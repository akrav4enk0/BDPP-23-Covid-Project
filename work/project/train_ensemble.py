"""
warning: autogenerated by writefile2. do not edit!
"""

import numpy as np
from IPython.display import display, HTML
import require
train_weak_learner = require.single( "train_weak_learner" )

def train_ensemble( train_set, verbose = 1 ):

    if verbose >= 1:

        display( HTML( f"<h1>Ensemble Training</h1>" ))
    
    def first_last( l ):

        M = np.zeros(( 2, l ))
        M[ 0, 0 ] = 1
        M[ 1, l - 1 ] = 1
        return M
    
    def mean( l ):

        return np.ones(( 1, l )) / l

    def gradient( l ):
    
        grad = np.zeros(( l, l ))
        #grad[ np.arange( l - 1 ) + 1, ( np.arange( l - 1 )) % l ] = -1 # for left diagonal
        grad[ np.arange( l ), np.arange( l )] = -1
        grad[ np.arange( l - 1 ), ( np.arange( l - 1 ) + 1 ) % l ] = 1
        return grad
    
    ensemble = [ ]
    length_r = 100
    
    learner = train_weak_learner( train_set, length_l = length_r, lag = 50, length_r = length_r, linear_operator = mean( length_r ) @ gradient( length_r ) @ gradient( length_r ), verbose = False )    
    ensemble.append( learner )
    
    learner = train_weak_learner( train_set, length_l = length_r, lag = 50, length_r = length_r, linear_operator = mean( length_r ) @ gradient( length_r ), verbose = False )    
    ensemble.append( learner )

    return ensemble
    
